import Head from "next/head";
import Image from "next/image";
import Link from "next/link";

import { HomeContainer, Product, SliderContainer } from "../styles/pages/home";

import { useKeenSlider } from "keen-slider/react";

import "keen-slider/keen-slider.min.css";
import { stripe } from "../lib/stripe";
import { GetStaticProps } from "next";
import Stripe from "stripe";

import useEmblaCarousel from "embla-carousel-react";
import { ProductSkeleton } from "../components/ProductSkeleton";
import { MouseEvent, useEffect, useState } from "react";
import { CartButton } from "../components/CartButton";
import { IProduct } from "../contexts/CartContext";
import { useCart } from "../hooks/useCart";
import styles from "../styles/Home.module.css";
import Carrossel from "../components/home/carrossel";
import BasicLayout from "../components/basic";
import { Products } from "../components/products";

interface HomeProps {
  products: IProduct[];
}

export async function getStaticProps() {
  const response = await stripe.products.list({
    expand: ["data.default_price"],
  });

  const products = response.data.map((product) => {
    const price = product.default_price as Stripe.Price;
    return {
      id: product.id,
      name: product.name,
      imageUrl: product.images[0],
      price: new Intl.NumberFormat("pt-BR", {
        style: "currency",
        currency: "BRL",
      }).format(price.unit_amount / 100),
      numberPrice: price.unit_amount / 100,
      defaultPriceId: price.id,
    };
  });

  return {
    props: {
      products,
    },
    revalidate: 60 * 60 * 2, // 2 hours,
  };
}

export default function Home({ products }: HomeProps) {
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // fake loading to use the skeleton loading from figma
    const timeOut = setTimeout(() => setIsLoading(false), 2000);

    return () => clearTimeout(timeOut);
  }, []);

  const [emblaRef] = useEmblaCarousel({
    align: "start",
    skipSnaps: false,
    dragFree: true,
  });

  const { addToCart, checkIfItemAlreadyExists } = useCart();

  function handleAddToCart(
    e: MouseEvent<HTMLButtonElement>,
    product: IProduct
  ) {
    e.preventDefault();
    addToCart(product);
  }

  return (
    <div>
      <Head>
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BasicLayout>
        <div className={styles.carrossel}>
          <Carrossel />
          <br />
        </div>
        <div className="flex flex-col items-center">
          <h1>Products</h1>
          <Products products={products} />
        </div>
      </BasicLayout>
    </div>
  );
}
